
/**
 * Generated ZTL Class for CustomMap
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.databound.CustomMap extends org.scn.community.shared.Component {

	/**
	 * Sets Activate onMouseOver/Out Property
	 */	
	void setActivateOnMouseOverOut( /**Activate onMouseOver/Out*/ boolean activateOnMouseOverOut){*
		this.activateOnMouseOverOut = activateOnMouseOverOut;
	*}

	/**
	 * Gets Activate onMouseOver/Out Property
	 */	
	boolean isActivateOnMouseOverOut() {*
		return this.activateOnMouseOverOut;
	*}

	/**
	 * Sets Area are deselectable Property
	 */	
	void setAreaDeselectable( /**Area are deselectable*/ boolean areaDeselectable){*
		this.areaDeselectable = areaDeselectable;
	*}

	/**
	 * Gets Area are deselectable Property
	 */	
	boolean isAreaDeselectable() {*
		return this.areaDeselectable;
	*}

	/**
	 * Sets Fill Color Property
	 */	
	void setAreaFillColor( /**Fill Color*/ String areaFillColor){*
		this.areaFillColor = areaFillColor;
	*}

	/**
	 * Gets Fill Color Property
	 */	
	String getAreaFillColor() {*
		return this.areaFillColor;
	*}

	/**
	 * Sets Fill Opacity Property
	 */	
	void setAreaFillOpacity( /**Fill Opacity*/ float areaFillOpacity){*
		this.areaFillOpacity = areaFillOpacity;
	*}

	/**
	 * Gets Fill Opacity Property
	 */	
	float getAreaFillOpacity() {*
		return this.areaFillOpacity;
	*}

	/** Adds a root element containing key [String], fillColor [String], fillOpacity [float], strokeColor [String], strokeOpacity [float], strokeWidth [int], tooltip [String].

 	<example>
	You want to add 2 root elements
	<code>
	CUSTOMMAP.addAreaProperty(key [String], fillColor [String], fillOpacity [float], strokeColor [String], strokeOpacity [float], strokeWidth [int], tooltip [String]);<br>
	CUSTOMMAP.addAreaProperty(key [String], fillColor [String], fillOpacity [float], strokeColor [String], strokeOpacity [float], strokeWidth [int], tooltip [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addAreaProperty (
			/**key of the area*/String key, 
			/**Fill Color*/String fillColor, 
			/**Fill Opacity*/float fillOpacity, 
			/**Stroke Color*/String strokeColor, 
			/**Stroke Opacity*/float strokeOpacity, 
			/**Stroke Width*/int strokeWidth, 
			/**Tooltip*/String tooltip
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			fillColor:fillColor, 
			fillOpacity:fillOpacity, 
			strokeColor:strokeColor, 
			strokeOpacity:strokeOpacity, 
			strokeWidth:strokeWidth, 
			tooltip:tooltip
			};

		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			this.areaProperties = "[]";
		}

		var elementsJson = JSON.parse(this.areaProperties);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.areaProperties = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	CUSTOMMAP.removeAreaProperty(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeAreaProperty (
			String key
			) {*

		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			this.areaProperties = "[]";
		}

		var elementsJson = JSON.parse(this.areaProperties);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.areaProperties = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	CUSTOMMAP.insertAreaProperty(index [int], key [String], fillColor [String], fillOpacity [float], strokeColor [String], strokeOpacity [float], strokeWidth [int], tooltip [String]);<br>
	<br>
	</code>
	</example>
	 */
	void insertAreaProperty (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**key of the area*/String key, 
			/**Fill Color*/String fillColor, 
			/**Fill Opacity*/float fillOpacity, 
			/**Stroke Color*/String strokeColor, 
			/**Stroke Opacity*/float strokeOpacity, 
			/**Stroke Width*/int strokeWidth, 
			/**Tooltip*/String tooltip
			) {*

		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			this.areaProperties = "[]";
		}
		
		var elementsJson = JSON.parse(this.areaProperties);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			fillColor:fillColor, 
			fillOpacity:fillOpacity, 
			strokeColor:strokeColor, 
			strokeOpacity:strokeOpacity, 
			strokeWidth:strokeWidth, 
			tooltip:tooltip
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.areaProperties = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given AreaProperty<br/>
	 */
	void updateAreaProperty (
			/**key of the area*/String key, 
			/**Fill Color*/String fillColor, 
			/**Fill Opacity*/float fillOpacity, 
			/**Stroke Color*/String strokeColor, 
			/**Stroke Opacity*/float strokeOpacity, 
			/**Stroke Width*/int strokeWidth, 
			/**Tooltip*/String tooltip
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			this.areaProperties = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			fillColor:fillColor, 
			fillOpacity:fillOpacity, 
			strokeColor:strokeColor, 
			strokeOpacity:strokeOpacity, 
			strokeWidth:strokeWidth, 
			tooltip:tooltip
		};

		var elementsJson = JSON.parse(this.areaProperties);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.areaProperties = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getAreaPropertyAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			this.areaProperties = "[]";
		}

		var elementsJson = JSON.parse(this.areaProperties);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets AreaPropertys As JSON String
	 */	
	String getAreaPropertysAsJSON() {*
		var jsonObject = JSON.parse(this.areaProperties);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All AreaPropertys
	 */	
	String cleanAllAreaPropertys() {*
		this.areaProperties = "[]";
	*}
	
	/**
	 * Sets the FillColor for AreaProperty keys<br/>
	 */
	void setAreaPropertyFillColors (
			/**/ String keys,
			/**/ String separator,
	        /* FillColor */ String fillColor
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.areaProperties);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].fillColor = fillColor;
					break;
				}
			}
		}
		
		this.areaProperties = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the FillColor for AreaProperty Key<br/>
	 */
	void setAreaPropertyFillColor (
			/**/ String key,
			/**/ String fillColor
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.areaProperties);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].fillColor = fillColor;
				break;
			}
		}

		this.areaProperties = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of FillColor for AreaProperty Key<br/>
	 */
	String getAreaPropertyFillColor (
			/**/ String key
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.areaProperties);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].fillColor;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the FillOpacity for AreaProperty keys<br/>
	 */
	void setAreaPropertyFillOpacitys (
			/**/ String keys,
			/**/ String separator,
	        /* FillOpacity */ float fillOpacity
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.areaProperties);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].fillOpacity = fillOpacity;
					break;
				}
			}
		}
		
		this.areaProperties = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the FillOpacity for AreaProperty Key<br/>
	 */
	void setAreaPropertyFillOpacity (
			/**/ String key,
			/**/ float fillOpacity
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.areaProperties);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].fillOpacity = fillOpacity;
				break;
			}
		}

		this.areaProperties = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of FillOpacity for AreaProperty Key<br/>
	 */
	float getAreaPropertyFillOpacity (
			/**/ String key
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.areaProperties);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].fillOpacity;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the StrokeColor for AreaProperty keys<br/>
	 */
	void setAreaPropertyStrokeColors (
			/**/ String keys,
			/**/ String separator,
	        /* StrokeColor */ String strokeColor
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.areaProperties);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].strokeColor = strokeColor;
					break;
				}
			}
		}
		
		this.areaProperties = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the StrokeColor for AreaProperty Key<br/>
	 */
	void setAreaPropertyStrokeColor (
			/**/ String key,
			/**/ String strokeColor
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.areaProperties);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].strokeColor = strokeColor;
				break;
			}
		}

		this.areaProperties = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of StrokeColor for AreaProperty Key<br/>
	 */
	String getAreaPropertyStrokeColor (
			/**/ String key
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.areaProperties);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].strokeColor;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the StrokeOpacity for AreaProperty keys<br/>
	 */
	void setAreaPropertyStrokeOpacitys (
			/**/ String keys,
			/**/ String separator,
	        /* StrokeOpacity */ float strokeOpacity
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.areaProperties);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].strokeOpacity = strokeOpacity;
					break;
				}
			}
		}
		
		this.areaProperties = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the StrokeOpacity for AreaProperty Key<br/>
	 */
	void setAreaPropertyStrokeOpacity (
			/**/ String key,
			/**/ float strokeOpacity
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.areaProperties);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].strokeOpacity = strokeOpacity;
				break;
			}
		}

		this.areaProperties = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of StrokeOpacity for AreaProperty Key<br/>
	 */
	float getAreaPropertyStrokeOpacity (
			/**/ String key
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.areaProperties);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].strokeOpacity;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the StrokeWidth for AreaProperty keys<br/>
	 */
	void setAreaPropertyStrokeWidths (
			/**/ String keys,
			/**/ String separator,
	        /* StrokeWidth */ int strokeWidth
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.areaProperties);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].strokeWidth = strokeWidth;
					break;
				}
			}
		}
		
		this.areaProperties = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the StrokeWidth for AreaProperty Key<br/>
	 */
	void setAreaPropertyStrokeWidth (
			/**/ String key,
			/**/ int strokeWidth
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.areaProperties);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].strokeWidth = strokeWidth;
				break;
			}
		}

		this.areaProperties = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of StrokeWidth for AreaProperty Key<br/>
	 */
	int getAreaPropertyStrokeWidth (
			/**/ String key
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.areaProperties);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].strokeWidth;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Tooltip for AreaProperty keys<br/>
	 */
	void setAreaPropertyTooltips (
			/**/ String keys,
			/**/ String separator,
	        /* Tooltip */ String tooltip
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.areaProperties);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].tooltip = tooltip;
					break;
				}
			}
		}
		
		this.areaProperties = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Tooltip for AreaProperty Key<br/>
	 */
	void setAreaPropertyTooltip (
			/**/ String key,
			/**/ String tooltip
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.areaProperties);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].tooltip = tooltip;
				break;
			}
		}

		this.areaProperties = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Tooltip for AreaProperty Key<br/>
	 */
	String getAreaPropertyTooltip (
			/**/ String key
			) 
	{*
		if (this.areaProperties === undefined || this.areaProperties === "" || this.areaProperties === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.areaProperties);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].tooltip;
				break;
			}
		}
		
		return value;
	*}



	/**
	 * Sets Area are selectable Property
	 */	
	void setAreaSelectable( /**Area are selectable*/ boolean areaSelectable){*
		this.areaSelectable = areaSelectable;
	*}

	/**
	 * Gets Area are selectable Property
	 */	
	boolean isAreaSelectable() {*
		return this.areaSelectable;
	*}

	/**
	 * Sets Stroke Color Property
	 */	
	void setAreaStrokeColor( /**Stroke Color*/ String areaStrokeColor){*
		this.areaStrokeColor = areaStrokeColor;
	*}

	/**
	 * Gets Stroke Color Property
	 */	
	String getAreaStrokeColor() {*
		return this.areaStrokeColor;
	*}

	/**
	 * Sets Stroke Opacity Property
	 */	
	void setAreaStrokeOpacity( /**Stroke Opacity*/ float areaStrokeOpacity){*
		this.areaStrokeOpacity = areaStrokeOpacity;
	*}

	/**
	 * Gets Stroke Opacity Property
	 */	
	float getAreaStrokeOpacity() {*
		return this.areaStrokeOpacity;
	*}

	/**
	 * Sets Stroke Width Property
	 */	
	void setAreaStrokeWidth( /**Stroke Width*/ int areaStrokeWidth){*
		this.areaStrokeWidth = areaStrokeWidth;
	*}

	/**
	 * Gets Stroke Width Property
	 */	
	int getAreaStrokeWidth() {*
		return this.areaStrokeWidth;
	*}

	/**
	 * Sets Auto resize Property
	 */	
	void setAutoResize( /**Auto resize*/ boolean autoResize){*
		this.autoResize = autoResize;
	*}

	/**
	 * Gets Auto resize Property
	 */	
	boolean isAutoResize() {*
		return this.autoResize;
	*}

	/**
	 * Sets Tooltip template (html + Mustache) Property
	 */	
	void setContentTooltip( /**Tooltip template (html + Mustache)*/ String contentTooltip){*
		this.contentTooltip = contentTooltip;
	*}

	/**
	 * Gets Tooltip template (html + Mustache) Property
	 */	
	String getContentTooltip() {*
		return this.contentTooltip;
	*}

	/**
	 * Sets Data List Property
	 */	
	void setData( /**Data List*/ ResultSet data){*
		this.data = data;
	*}

	/**
	 * Gets Data List Property
	 */	
	ResultSet getData() {*
		return this.data;
	*}

	/**
	 * Sets Reference Measure Selection Property
	 */	
	void setDataCellList( /**Reference Measure Selection*/ ResultCellList dataCellList){*
		this.dataCellList = dataCellList;
	*}

	/**
	 * Gets Reference Measure Selection Property
	 */	
	ResultCellList getDataCellList() {*
		return this.dataCellList;
	*}



	/**
	 * Sets Activate Strokes Property
	 */	
	void setDisplayStroke( /**Activate Strokes*/ boolean displayStroke){*
		this.displayStroke = displayStroke;
	*}

	/**
	 * Gets Activate Strokes Property
	 */	
	boolean isDisplayStroke() {*
		return this.displayStroke;
	*}

	/**
	 * Sets Display Tooltip Property
	 */	
	void setDisplayTooltip( /**Display Tooltip*/ boolean displayTooltip){*
		this.displayTooltip = displayTooltip;
	*}

	/**
	 * Gets Display Tooltip Property
	 */	
	boolean isDisplayTooltip() {*
		return this.displayTooltip;
	*}

	/**
	 * Sets Color Palette Property
	 */	
	void setDynamicColorPalette( /**Color Palette*/ String dynamicColorPalette){*
		this.dynamicColorPalette = dynamicColorPalette;
	*}

	/**
	 * Gets Color Palette Property
	 */	
	String getDynamicColorPalette() {*
		return this.dynamicColorPalette;
	*}

	/**
	 * Sets enable Fill Properties Property
	 */	
	void setEnableAreaFill( /**enable Fill Properties*/ boolean enableAreaFill){*
		this.enableAreaFill = enableAreaFill;
	*}

	/**
	 * Gets enable Fill Properties Property
	 */	
	boolean isEnableAreaFill() {*
		return this.enableAreaFill;
	*}

	/**
	 * Sets Enable Dynamic Colors Property
	 */	
	void setEnableDynamicColors( /**Enable Dynamic Colors*/ boolean enableDynamicColors){*
		this.enableDynamicColors = enableDynamicColors;
	*}

	/**
	 * Gets Enable Dynamic Colors Property
	 */	
	boolean isEnableDynamicColors() {*
		return this.enableDynamicColors;
	*}

	/**
	 * Sets Activate special properties on Highlight Property
	 */	
	void setEnableSpecificPropHighlight( /**Activate special properties on Highlight*/ boolean enableSpecificPropHighlight){*
		this.enableSpecificPropHighlight = enableSpecificPropHighlight;
	*}

	/**
	 * Gets Activate special properties on Highlight Property
	 */	
	boolean isEnableSpecificPropHighlight() {*
		return this.enableSpecificPropHighlight;
	*}

	/**
	 * Sets Activate special properties when Selected Property
	 */	
	void setEnableSpecificPropSelected( /**Activate special properties when Selected*/ boolean enableSpecificPropSelected){*
		this.enableSpecificPropSelected = enableSpecificPropSelected;
	*}

	/**
	 * Gets Activate special properties when Selected Property
	 */	
	boolean isEnableSpecificPropSelected() {*
		return this.enableSpecificPropSelected;
	*}

	/**
	 * Sets Fill Color Property
	 */	
	void setHighlightFillColor( /**Fill Color*/ String highlightFillColor){*
		this.highlightFillColor = highlightFillColor;
	*}

	/**
	 * Gets Fill Color Property
	 */	
	String getHighlightFillColor() {*
		return this.highlightFillColor;
	*}

	/**
	 * Sets Fill Opacity Property
	 */	
	void setHighlightFillOpacity( /**Fill Opacity*/ float highlightFillOpacity){*
		this.highlightFillOpacity = highlightFillOpacity;
	*}

	/**
	 * Gets Fill Opacity Property
	 */	
	float getHighlightFillOpacity() {*
		return this.highlightFillOpacity;
	*}

	/**
	 * Sets Stroke Color Property
	 */	
	void setHighlightStrokeColor( /**Stroke Color*/ String highlightStrokeColor){*
		this.highlightStrokeColor = highlightStrokeColor;
	*}

	/**
	 * Gets Stroke Color Property
	 */	
	String getHighlightStrokeColor() {*
		return this.highlightStrokeColor;
	*}

	/**
	 * Sets Stroke Opacity Property
	 */	
	void setHighlightStrokeOpacity( /**Stroke Opacity*/ float highlightStrokeOpacity){*
		this.highlightStrokeOpacity = highlightStrokeOpacity;
	*}

	/**
	 * Gets Stroke Opacity Property
	 */	
	float getHighlightStrokeOpacity() {*
		return this.highlightStrokeOpacity;
	*}

	/**
	 * Sets Stroke Width Property
	 */	
	void setHighlightStrokeWidth( /**Stroke Width*/ int highlightStrokeWidth){*
		this.highlightStrokeWidth = highlightStrokeWidth;
	*}

	/**
	 * Gets Stroke Width Property
	 */	
	int getHighlightStrokeWidth() {*
		return this.highlightStrokeWidth;
	*}

	/**
	 * Gets  Property
	 */	
	String getHighlightedArea() {*
		return this.highlightedArea;
	*}

	/**
	 * Sets Image url of Base 64 Property
	 */	
	void setImage( /**Image url of Base 64*/ String image){*
		this.image = image;
	*}

	/**
	 * Gets Image url of Base 64 Property
	 */	
	String getImage() {*
		return this.image;
	*}

	/**
	 * Sets Associated map, same scaling as base image Property
	 */	
	void setMap( /**Associated map, same scaling as base image*/ String map){*
		this.map = map;
	*}

	/**
	 * Gets Associated map, same scaling as base image Property
	 */	
	String getMap() {*
		return this.map;
	*}

	/**
	 * Sets Map key attribute Property
	 */	
	void setMapDataKey( /**Map key attribute*/ String mapDataKey){*
		this.mapDataKey = mapDataKey;
	*}

	/**
	 * Gets Map key attribute Property
	 */	
	String getMapDataKey() {*
		return this.mapDataKey;
	*}









	/**
	 * Sets Single Select Property
	 */	
	void setOnlySingleSelect( /**Single Select*/ boolean onlySingleSelect){*
		this.onlySingleSelect = onlySingleSelect;
	*}

	/**
	 * Gets Single Select Property
	 */	
	boolean isOnlySingleSelect() {*
		return this.onlySingleSelect;
	*}

	/**
	 * Sets Resize Duration (ms) Property
	 */	
	void setResizeDuration( /**Resize Duration (ms)*/ int resizeDuration){*
		this.resizeDuration = resizeDuration;
	*}

	/**
	 * Gets Resize Duration (ms) Property
	 */	
	int getResizeDuration() {*
		return this.resizeDuration;
	*}

	/**
	 * Sets  Property
	 */	
	void setSelectedAreas( /***/ String selectedAreas){*
		this.selectedAreas = selectedAreas;
	*}

	/**
	 * Gets  Property
	 */	
	String getSelectedAreas() {*
		return this.selectedAreas;
	*}

	/**
	 * Sets Fill Color Property
	 */	
	void setSelectedFillColor( /**Fill Color*/ String selectedFillColor){*
		this.selectedFillColor = selectedFillColor;
	*}

	/**
	 * Gets Fill Color Property
	 */	
	String getSelectedFillColor() {*
		return this.selectedFillColor;
	*}

	/**
	 * Sets Fill Opacity Property
	 */	
	void setSelectedFillOpacity( /**Fill Opacity*/ float selectedFillOpacity){*
		this.selectedFillOpacity = selectedFillOpacity;
	*}

	/**
	 * Gets Fill Opacity Property
	 */	
	float getSelectedFillOpacity() {*
		return this.selectedFillOpacity;
	*}

	/**
	 * Sets Stroke Color Property
	 */	
	void setSelectedStrokeColor( /**Stroke Color*/ String selectedStrokeColor){*
		this.selectedStrokeColor = selectedStrokeColor;
	*}

	/**
	 * Gets Stroke Color Property
	 */	
	String getSelectedStrokeColor() {*
		return this.selectedStrokeColor;
	*}

	/**
	 * Sets Stroke Opacity Property
	 */	
	void setSelectedStrokeOpacity( /**Stroke Opacity*/ float selectedStrokeOpacity){*
		this.selectedStrokeOpacity = selectedStrokeOpacity;
	*}

	/**
	 * Gets Stroke Opacity Property
	 */	
	float getSelectedStrokeOpacity() {*
		return this.selectedStrokeOpacity;
	*}

	/**
	 * Sets Stroke Width Property
	 */	
	void setSelectedStrokeWidth( /**Stroke Width*/ int selectedStrokeWidth){*
		this.selectedStrokeWidth = selectedStrokeWidth;
	*}

	/**
	 * Gets Stroke Width Property
	 */	
	int getSelectedStrokeWidth() {*
		return this.selectedStrokeWidth;
	*}

	/**
	 * Sets Display all areas by default Property
	 */	
	void setStaticDisplay( /**Display all areas by default*/ boolean staticDisplay){*
		this.staticDisplay = staticDisplay;
	*}

	/**
	 * Gets Display all areas by default Property
	 */	
	boolean isStaticDisplay() {*
		return this.staticDisplay;
	*}

	/**
	 * Sets Tooltip override mode Property
	 */	
	void setTooltipMode( /**Tooltip override mode*/ String tooltipMode){*
		this.tooltipMode = tooltipMode;
	*}

	/**
	 * Gets Tooltip override mode Property
	 */	
	String getTooltipMode() {*
		return this.tooltipMode;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

/**
 * Get selected areas as an array
 */	
Array getSelectedAreasAsArray(){*
	return this.getSelectedAreas().split(",");
*}
	
}
